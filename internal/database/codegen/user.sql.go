// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package codegen

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id, created_at, updated_at, name, email, password, is_email_verified, avatar_url
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, name, email, password, is_email_verified, avatar_url FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.AvatarUrl,
	)
	return i, err
}

const userEmailTaken = `-- name: UserEmailTaken :one
SELECT EXISTS(
  SELECT 1 FROM users
  WHERE email = $1 AND is_email_verified = TRUE
)
`

func (q *Queries) UserEmailTaken(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userEmailTaken, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
