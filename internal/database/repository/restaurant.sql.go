// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: restaurant.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createRestaurant = `-- name: CreateRestaurant :one
INSERT INTO restaurants
(name, alias, address, lat, lng, phone, place_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, name, alias, description, address, lat, lng, phone, image_url, is_verified, place_id
`

type CreateRestaurantParams struct {
	Name    string
	Alias   string
	Address string
	Lat     *float64
	Lng     *float64
	Phone   *string
	PlaceID string
}

func (q *Queries) CreateRestaurant(ctx context.Context, arg CreateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRow(ctx, createRestaurant,
		arg.Name,
		arg.Alias,
		arg.Address,
		arg.Lat,
		arg.Lng,
		arg.Phone,
		arg.PlaceID,
	)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Alias,
		&i.Description,
		&i.Address,
		&i.Lat,
		&i.Lng,
		&i.Phone,
		&i.ImageUrl,
		&i.IsVerified,
		&i.PlaceID,
	)
	return i, err
}

const isRestaurantAlreadyTaken = `-- name: IsRestaurantAlreadyTaken :one
SELECT EXISTS (
    SELECT 1
    FROM restaurants r
    LEFT JOIN restaurant_users ru ON ru.restaurant_id = r.id AND ru.user_id = $2
    WHERE r.place_id = $1
    AND (
        r.is_verified = TRUE OR ru.id IS NOT NULL
    )
)
`

type IsRestaurantAlreadyTakenParams struct {
	PlaceID string
	UserID  uuid.UUID
}

func (q *Queries) IsRestaurantAlreadyTaken(ctx context.Context, arg IsRestaurantAlreadyTakenParams) (bool, error) {
	row := q.db.QueryRow(ctx, isRestaurantAlreadyTaken, arg.PlaceID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
